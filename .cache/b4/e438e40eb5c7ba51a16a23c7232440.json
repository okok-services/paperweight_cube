{"id":"js/shader/vertex.glsl","dependencies":[{"name":"/Users/faris/OKOK Dropbox/Faris Kassim/mamp/htdocs/owntests/for_yerim/paperweight/code/wonglok_paperweight/v1/package.json","includedInParent":true,"mtime":1605260140000}],"generated":{"js":"module.exports = \"#define GLSLIFY 1\\n    uniform float mRefractionRatio;\\n    uniform float mFresnelBias;\\n    uniform float mFresnelScale;\\n    uniform float mFresnelPower;\\n    uniform float uWozzy;\\n    uniform float time;\\n    varying vec3 vReflect;\\n    varying vec3 vRefract[3];\\n    varying float vReflectionFactor;\\n    varying vec2 vUv;\\n\\n        void main() {\\n      vUv = uv;\\n      vec3 funPos = position;\\n      // float cx = cnoise(normal.x + vec2(position.x * 0.11) + time) * 0.1 * uWozzy;\\n      // float cy = cnoise(normal.y + vec2(position.y * 0.12) + time) * 0.1 * uWozzy;\\n      // float cz = cnoise(normal.z + vec2(position.z * 0.13) + time) * 0.1 * uWozzy;\\n      // funPos.x += funPos.x * cx;\\n      // funPos.y += funPos.y * cy;\\n      // funPos.z += funPos.z * cz;\\n      vec4 mvPosition = modelViewMatrix * vec4( funPos, 1.0 );\\n      vec4 worldPosition = modelMatrix * vec4( funPos, 1.0 );\\n      vec3 worldNormal = normalize( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\\n      vec3 I = worldPosition.xyz - cameraPosition;\\n      vReflect = reflect( I, worldNormal );\\n      vRefract[0] = refract( normalize( I ), worldNormal, mRefractionRatio );\\n      vRefract[1] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.99 );\\n      vRefract[2] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.98 );\\n      vReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), worldNormal ), mFresnelPower );\\n      gl_Position = projectionMatrix * mvPosition;\\n      gl_PointSize = 10.0;\\n    }\";"},"sourceMaps":{"js":{"mappings":[{"name":"module","generated":{"line":1,"column":0},"source":"js/shader/vertex.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":6},"source":"js/shader/vertex.glsl","original":{"line":1,"column":6}},{"name":"exports","generated":{"line":1,"column":7},"source":"js/shader/vertex.glsl","original":{"line":1,"column":7}},{"generated":{"line":1,"column":14},"source":"js/shader/vertex.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"js/shader/vertex.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":1591},"source":"js/shader/vertex.glsl","original":{"line":1,"column":0}}],"sources":{"js/shader/vertex.glsl":"module.exports=\"#define GLSLIFY 1\\n    uniform float mRefractionRatio;\\n    uniform float mFresnelBias;\\n    uniform float mFresnelScale;\\n    uniform float mFresnelPower;\\n    uniform float uWozzy;\\n    uniform float time;\\n    varying vec3 vReflect;\\n    varying vec3 vRefract[3];\\n    varying float vReflectionFactor;\\n    varying vec2 vUv;\\n\\n        void main() {\\n      vUv = uv;\\n      vec3 funPos = position;\\n      // float cx = cnoise(normal.x + vec2(position.x * 0.11) + time) * 0.1 * uWozzy;\\n      // float cy = cnoise(normal.y + vec2(position.y * 0.12) + time) * 0.1 * uWozzy;\\n      // float cz = cnoise(normal.z + vec2(position.z * 0.13) + time) * 0.1 * uWozzy;\\n      // funPos.x += funPos.x * cx;\\n      // funPos.y += funPos.y * cy;\\n      // funPos.z += funPos.z * cz;\\n      vec4 mvPosition = modelViewMatrix * vec4( funPos, 1.0 );\\n      vec4 worldPosition = modelMatrix * vec4( funPos, 1.0 );\\n      vec3 worldNormal = normalize( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\\n      vec3 I = worldPosition.xyz - cameraPosition;\\n      vReflect = reflect( I, worldNormal );\\n      vRefract[0] = refract( normalize( I ), worldNormal, mRefractionRatio );\\n      vRefract[1] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.99 );\\n      vRefract[2] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.98 );\\n      vReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), worldNormal ), mFresnelPower );\\n      gl_Position = projectionMatrix * mvPosition;\\n      gl_PointSize = 10.0;\\n    }\";"},"lineCount":null}},"error":null,"hash":"86bdd23702b0502dfe8ad7f2440fcf9a","cacheData":{"env":{}}}