{"id":"js/shader/fragment.glsl","dependencies":[{"name":"/Users/faris/OKOK Dropbox/Faris Kassim/mamp/htdocs/owntests/for_yerim/paperweight/code/wonglok_paperweight/v1/package.json","includedInParent":true,"mtime":1605260140000}],"generated":{"js":"module.exports = \"#define GLSLIFY 1\\n    uniform samplerCube tCube;\\n    uniform sampler2D tDudv;\\n    uniform float time;\\n    uniform float opacity;\\n    varying vec3 vReflect;\\n    varying vec3 vRefract[3];\\n    varying float vReflectionFactor;\\n    varying vec2 vUv;\\n    uniform bool useDudv;\\n    uniform vec3 remixColor;\\n    void main() {\\n      vec3 tRefract0 = vRefract[0];\\n      vec3 tRefract1 = vRefract[1];\\n      vec3 tRefract2 = vRefract[2];\\n      if (useDudv) {\\n        float waveStrength = 0.053333;\\n        // simple distortion (ripple) via dudv map (see )\\n        // https://www.youtube.com/watch?v=6B7IF6GOu7s\\n        vec2 distortedUv = texture2D( tDudv, vec2( vUv.x, vUv.y ) ).rg * waveStrength;\\n        distortedUv = vUv.xy + sin(time * 0.067) * 0.5 + vec2( distortedUv.x, distortedUv.y );\\n        vec2 distortion = ( texture2D( tDudv, distortedUv * 0.25 ).rg * 2.0 - 1.0 ) * waveStrength;\\n        tRefract0.xy += distortion;\\n        tRefract1.xy += distortion;\\n        tRefract2.xy += distortion;\\n      }\\n      // vec4 reflectedColor = textureCube( tCube, vec3( vReflect.x, vReflect.y, vReflect.z ) );\\n      vec4 reflectedColor = textureCube( tCube, vec3( vReflect.x, vReflect.y, vReflect.z ) );\\n      vec4 refractedColor = vec4(1.0);\\n      refractedColor.r = textureCube( tCube, vec3( tRefract0.x, tRefract0.yz ) ).r;\\n      refractedColor.g = textureCube( tCube, vec3( tRefract1.x, tRefract1.yz ) ).g;\\n      refractedColor.b = textureCube( tCube, vec3( tRefract2.x, tRefract2.yz ) ).b;\\n      // refractedColor.r = textureCube( tCube, vec3( -tRefract0.x, tRefract0.yz ) ).r;\\n      // refractedColor.g = textureCube( tCube, vec3( -tRefract1.x, tRefract1.yz ) ).g;\\n      // refractedColor.b = textureCube( tCube, vec3( -tRefract2.x, tRefract2.yz ) ).b;\\n      // vec2 coord = gl_PointCoord.xy - vec2(0.5);\\n      // if (length(coord) > 0.5) {\\n      //   discard;\\n      // } else {\\n      //   gl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\\n      // }\\n      gl_FragColor = mix( reflectedColor, refractedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\\n      gl_FragColor.rgb = remixColor.rgb * gl_FragColor.rgb;\\n      gl_FragColor.a = opacity;\\n    }\";"},"sourceMaps":{"js":{"mappings":[{"name":"module","generated":{"line":1,"column":0},"source":"js/shader/fragment.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":6},"source":"js/shader/fragment.glsl","original":{"line":1,"column":6}},{"name":"exports","generated":{"line":1,"column":7},"source":"js/shader/fragment.glsl","original":{"line":1,"column":7}},{"generated":{"line":1,"column":14},"source":"js/shader/fragment.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"js/shader/fragment.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":2241},"source":"js/shader/fragment.glsl","original":{"line":1,"column":0}}],"sources":{"js/shader/fragment.glsl":"module.exports=\"#define GLSLIFY 1\\n    uniform samplerCube tCube;\\n    uniform sampler2D tDudv;\\n    uniform float time;\\n    uniform float opacity;\\n    varying vec3 vReflect;\\n    varying vec3 vRefract[3];\\n    varying float vReflectionFactor;\\n    varying vec2 vUv;\\n    uniform bool useDudv;\\n    uniform vec3 remixColor;\\n    void main() {\\n      vec3 tRefract0 = vRefract[0];\\n      vec3 tRefract1 = vRefract[1];\\n      vec3 tRefract2 = vRefract[2];\\n      if (useDudv) {\\n        float waveStrength = 0.053333;\\n        // simple distortion (ripple) via dudv map (see )\\n        // https://www.youtube.com/watch?v=6B7IF6GOu7s\\n        vec2 distortedUv = texture2D( tDudv, vec2( vUv.x, vUv.y ) ).rg * waveStrength;\\n        distortedUv = vUv.xy + sin(time * 0.067) * 0.5 + vec2( distortedUv.x, distortedUv.y );\\n        vec2 distortion = ( texture2D( tDudv, distortedUv * 0.25 ).rg * 2.0 - 1.0 ) * waveStrength;\\n        tRefract0.xy += distortion;\\n        tRefract1.xy += distortion;\\n        tRefract2.xy += distortion;\\n      }\\n      // vec4 reflectedColor = textureCube( tCube, vec3( vReflect.x, vReflect.y, vReflect.z ) );\\n      vec4 reflectedColor = textureCube( tCube, vec3( vReflect.x, vReflect.y, vReflect.z ) );\\n      vec4 refractedColor = vec4(1.0);\\n      refractedColor.r = textureCube( tCube, vec3( tRefract0.x, tRefract0.yz ) ).r;\\n      refractedColor.g = textureCube( tCube, vec3( tRefract1.x, tRefract1.yz ) ).g;\\n      refractedColor.b = textureCube( tCube, vec3( tRefract2.x, tRefract2.yz ) ).b;\\n      // refractedColor.r = textureCube( tCube, vec3( -tRefract0.x, tRefract0.yz ) ).r;\\n      // refractedColor.g = textureCube( tCube, vec3( -tRefract1.x, tRefract1.yz ) ).g;\\n      // refractedColor.b = textureCube( tCube, vec3( -tRefract2.x, tRefract2.yz ) ).b;\\n      // vec2 coord = gl_PointCoord.xy - vec2(0.5);\\n      // if (length(coord) > 0.5) {\\n      //   discard;\\n      // } else {\\n      //   gl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\\n      // }\\n      gl_FragColor = mix( reflectedColor, refractedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\\n      gl_FragColor.rgb = remixColor.rgb * gl_FragColor.rgb;\\n      gl_FragColor.a = opacity;\\n    }\";"},"lineCount":null}},"error":null,"hash":"459bca5f4cd1de7d5435c72676e871b3","cacheData":{"env":{}}}